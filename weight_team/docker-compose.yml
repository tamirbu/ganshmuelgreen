# version: '3.9'
# services:
#   weight_service:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: ${PROJECT_NAME}_weight_app
#     volumes:
#       - ./src/in:/app/in
#     ports:
#       - "${APP_PORT_MAPPING}:5000"
#     environment:
#       - MYSQL_HOST=${MYSQL_HOST}
#       - MYSQL_PORT=${MYSQL_PORT}
#       - MYSQL_DATABASE=${MYSQL_DATABASE}
#       - MYSQL_USER=${MYSQL_USER}
#       - MYSQL_PASSWORD=${MYSQL_PASSWORD}
#     depends_on:
#       mysql:
#         condition: service_healthy
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://${MYSQL_HOST}:5000/health"]
#       interval: 10s
#       timeout: 5s
#       retries: 3

#   mysql:
#     image: mysql:8.0
#     container_name: ${PROJECT_NAME}_mysql_weight_db
#     ports:
#       - "${DB_PORT_MAPPING}:3306"
#     environment:
#       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#       MYSQL_DATABASE: ${MYSQL_DATABASE}
#       MYSQL_USER: ${MYSQL_USER}
#       MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#       MYSQL_HOST: ${MYSQL_HOST}
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "${MYSQL_HOST}"]
#       interval: 10s
#       timeout: 5s
#       retries: 3
#     volumes:
#       - mysql_weight_data:/var/lib/mysql
#       - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
    
#   test_runner:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     depends_on:
#       - weight_service
#     volumes:
#       - .:/app
#       - ./sample_files/sample_uploads:/app/in
#       - ./outputs:/app/outputs
#     environment:
#       - MYSQL_HOST=mysql
#       - MYSQL_PORT=3306
#       - MYSQL_DATABASE=weight
#       - MYSQL_USER=weight_user
#       - MYSQL_PASSWORD=weight_pass
#     command: /bin/sh -c "python -m unittest discover -s /app -p '*_tests.py' > /app/outputs/test_results.log 2>&1"
#     restart: "no"
#     profiles:
#       - ${TEST_PROFILE}

# volumes:
#   mysql_weight_data:

# networks:
#   shared_network:
#     external: true
version: '3.9'
services:
  weight_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_weight_app
    volumes:
      - ./src/in:/app/in
    ports:
      - "${APP_PORT_MAPPING}:5000"
    environment:
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${MYSQL_HOST}:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - shared_network

  mysql:
    image: mysql:8.0
    container_name: ${PROJECT_NAME}_mysql_weight_db
    ports:
      - "${DB_PORT_MAPPING}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_HOST: ${MYSQL_HOST}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "${MYSQL_HOST}"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - mysql_weight_data:/var/lib/mysql
      - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - shared_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - REACT_APP_API_URL=/api
    depends_on:
      - weight_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - shared_network

  test_runner:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - weight_service
    volumes:
      - .:/app
      - ./sample_files/sample_uploads:/app/in
      - ./outputs:/app/outputs
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=weight
      - MYSQL_USER=weight_user
      - MYSQL_PASSWORD=weight_pass
    command: /bin/sh -c "python -m unittest discover -s /app -p '*_tests.py' > /app/outputs/test_results.log 2>&1"
    restart: "no"
    profiles:
      - ${TEST_PROFILE}
    networks:
      - shared_network

volumes:
  mysql_weight_data:

networks:
  shared_network:
    external: true